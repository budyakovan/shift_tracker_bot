# -*- coding: utf-8 -*-
import logging
from telegram import Update
from telegram.ext import ContextTypes

from database import group_repository

logger = logging.getLogger(__name__)

async def mygroup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    grp = group_repository.get_user_group(user_id)
    if not grp:
        await update.message.reply_text("ü™™ –¢–≤–æ—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")
        return
    epoch_text = grp["epoch"].strftime("%d.%m.%Y") if grp["epoch"] else f"BASE+{grp['offset_days']}–¥"
    await update.message.reply_text(
        f"üë• <b>–¢–≤–æ—è –≥—Ä—É–ø–ø–∞</b>\n"
        f"–ö–ª—é—á: <code>{grp['key']}</code>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {grp['name']}\n"
        f"–°–¥–≤–∏–≥: {grp['offset_days']} –¥–Ω.\n"
        f"–≠–ø–æ—Ö–∞: {epoch_text}",
        parse_mode="HTML",
    )

async def groups_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    groups = group_repository.list_groups()
    if not groups:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –ü–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã.")
        return
    lines = ["üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã</b>:\n"]
    for g in groups:
        epoch_text = g["epoch"].strftime("%d.%m.%Y") if g["epoch"] else f"BASE+{g['offset_days']}–¥"
        lines.append(f"‚Ä¢ <code>{g['key']}</code> ‚Äî {g['name']} (—Å–¥–≤–∏–≥ {g['offset_days']} –¥–Ω., —ç–ø–æ—Ö–∞: {epoch_text})")
    await update.message.reply_text("\n".join(lines), parse_mode="HTML")
