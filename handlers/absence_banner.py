# handlers/absence_banner.py
# -*- coding: utf-8 -*-
import re
from datetime import datetime
from typing import Tuple
from telegram.constants import ParseMode
from database.absence_repository import get_absence_on_date

DATE_RE = re.compile(r"\b(\d{4})-(\d{2})-(\d{2})\b")

def inject_absence_banner_for_text(raw_text: str, user_id: int) -> Tuple[str, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å_–≤–æ–∑–º–æ–∂–Ω—ã–º_–±–∞–Ω–Ω–µ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω_html_–±–∞–Ω–Ω–µ—Ä).
    –ë–∞–Ω–Ω–µ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–Ω—å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç–ø—É—Å–∫/–±–æ–ª—å–Ω–∏—á–Ω—ã–π.
    """
    if not raw_text:
        return raw_text, False

    m = DATE_RE.search(raw_text)
    if not m:
        return raw_text, False

    try:
        target_date = datetime.strptime(m.group(0), "%Y-%m-%d").date()
    except Exception:
        return raw_text, False

    absence = get_absence_on_date(user_id, target_date)
    if not absence:
        return raw_text, False

    emoji = "üèñ" if absence["absence_type"] == "vacation" else "ü§í"
    label = "–û—Ç–ø—É—Å–∫" if absence["absence_type"] == "vacation" else "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π"
    banner = (
        f"<b>{emoji} {label}</b>: {absence['date_from']}‚Äî{absence['date_to']}"
        + (f" ‚Äî {absence['comment']}" if absence.get("comment") else "")
        + "\n‚ö†Ô∏è <b>–î–µ–Ω—å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ</b>\n"
    )
    return banner + raw_text, True

async def reply_with_absence_banner(update, text: str, user_id: int):
    """
    –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º parse_mode=HTML, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç <b>, <code> –∏ —Ç.–ø.
    –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ HTML.
    """
    new_text, _ = inject_absence_banner_for_text(text, user_id)
    await update.message.reply_text(new_text, parse_mode=ParseMode.HTML)
