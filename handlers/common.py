from datetime import date, timedelta
from telegram import Update
from telegram.ext import ContextTypes

from services.user_manager import user_manager
from services.auth_manager import auth_manager
from utils.formatters import format_shift_message


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ø–æ–Ω–∏–º–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"/"–ó–∞–≤—Ç—Ä–∞"
    - –Ω–∞ –ø—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç –¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    """
    if not update.message or not update.message.text:
        return

    text = (update.message.text or "").strip().lower()
    user_id = update.effective_user.id
    if text in ("‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "? –ø–æ–º–æ—â—å", "/help", "help"):
        # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.help_handlers import help_command as _help
        await _help(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, approved –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not auth_manager.is_user_approved(user_id):
        await update.message.reply_text(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            f"üÜî –í–∞—à ID: {user_id}\n"
            "üìã –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
        return

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    if text in ("üìÖ —Å–µ–≥–æ–¥–Ω—è", "—Å–µ–≥–æ–¥–Ω—è", "/today"):
        await handle_today(update, user_id)
        return

    if text in ("üìÖ –∑–∞–≤—Ç—Ä–∞", "–∑–∞–≤—Ç—Ä–∞", "/tomorrow"):
        await handle_tomorrow(update, user_id)
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –î–æ—Å—Ç—É–ø–Ω–æ: /today, /tomorrow, /help",
    )


async def handle_today(update: Update, user_id: int):
    """–°–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    shift_info = user_manager.get_user_shift(user_id, today)
    if shift_info:
        message = format_shift_message(shift_info)
        await update.message.reply_text(message, parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")


async def handle_tomorrow(update: Update, user_id: int):
    """–°–º–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = date.today() + timedelta(days=1)
    shift_info = user_manager.get_user_shift(user_id, tomorrow)
    if shift_info:
        message = format_shift_message(shift_info)
        await update.message.reply_text(message, parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")


async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ ID (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    user = update.effective_user
    user_id = user.id
    username = user.username or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    first_name = user.first_name or ""
    last_name = user.last_name or ""

    message = (
        f"üë§ <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"üÜî <b>–í–∞—à ID:</b> <code>{user_id}</code>\n"
        f"üìõ <b>–ò–º—è:</b> {first_name} {last_name}\n"
        f"üîó <b>Username:</b> @{username}\n\n"
        f"üí° <b>–≠—Ç–æ—Ç ID –Ω—É–∂–µ–Ω –¥–ª—è:</b>\n"
        f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        f"‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"
    )

    await update.message.reply_text(message, parse_mode='HTML')
