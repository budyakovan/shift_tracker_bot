import logging, re, html
from datetime import datetime, date, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from utils.decorators import require_admin
from database import time_repository as time_repo
from database import group_repository
from html import escape
from logic.duty import _local_cycle_day, _phase_label, _phase_kind
from telegram.constants import ParseMode  # –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from handlers.help_texts import HELP_GROUPS_SHORT, HELP_TIME_PROFILES_SHORT

logger = logging.getLogger(__name__)

_SEP_PATTERN = re.compile(r"[.\-\/\s\u00A0\u2007\u202F]+")  # . - / –ø—Ä–æ–±–µ–ª, NBSP, Figure space, NNBSP

def _parse_epoch_date(s: str) -> date:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å ¬´–≥—Ä—è–∑–Ω—ã–º–∏¬ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.
    –ü—Ä–∏–º–µ—Ä—ã: 05.09.2025 / 05-09-2025 / 05/09/2025 / 05.09
    """
    if not s:
        raise ValueError("empty")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ —Ç–æ—á–∫—É,
    # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–∫—Ä—É–≥
    s_norm = _SEP_PATTERN.sub(".", s).strip(" .")

    # –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –≥–æ–¥–∞: –î–î.–ú–ú
    m2 = re.fullmatch(r"(\d{1,2})\.(\d{1,2})", s_norm)
    if m2:
        d, m = map(int, m2.groups())
        y = date.today().year
        return date(y, m, d)

    # –í–∞—Ä–∏–∞–Ω—Ç —Å –≥–æ–¥–æ–º: –î–î.–ú–ú.–ì–ì–ì–ì
    m3 = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{4})", s_norm)
    if m3:
        d, m, y = m3.groups()
        return date(int(y), int(m), int(d))

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —á—Ç–æ-—Ç–æ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–æ–µ ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ fmt
    for fmt in ("%d.%m.%Y", "%d-%m-%Y", "%d/%m/%Y", "%d.%m"):
        try:
            dt = datetime.strptime(s_norm, fmt)
            if fmt == "%d.%m":
                return date(date.today().year, dt.month, dt.day)
            return dt.date()
        except ValueError:
            pass

    raise ValueError(f"bad date: {s!r} -> {s_norm!r}")

@require_admin
async def admin_time_groups_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–∂–∏–¥–∞–µ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(context.args) < 4:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/admin_time_groups_create <group_key> <profile_key> <DD.MM.YYYY|YYYY-MM-DD> <period_days> [\"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\"]"
        )
        return

    group_key = context.args[0].strip()
    profile_key = context.args[1].strip()
    epoch_raw = context.args[2].strip()

    # period
    try:
        period = int(context.args[3])
        if period <= 0:
            raise ValueError()
    except Exception:
        await update.message.reply_text("‚ùå period_days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        return

    # optional name (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ 4-–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
    name = " ".join(context.args[4:]).strip() if len(context.args) > 4 else ""
    # –µ—Å–ª–∏ –∏–º—è –æ–±—ë—Ä–Ω—É—Ç–æ –≤ –∫–∞–≤—ã—á–∫–∏ ‚Äî —É–±–µ—Ä—ë–º –∏—Ö
    if (name.startswith('"') and name.endswith('"')) or (name.startswith("'") and name.endswith("'")):
        name = name[1:-1].strip()
    # –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏
    if not name:
        name = group_key

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º DD.MM.YYYY –∏ YYYY-MM-DD -> —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ YYYY-MM-DD
    def normalize_date(s: str) -> str:
        for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
            try:
                return datetime.strptime(s, fmt).date().isoformat()
            except ValueError:
                pass
        # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ª—É—á—à–µ —É–ø–∞—Å—Ç—å
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD")

    try:
        epoch_iso = normalize_date(epoch_raw)
    except ValueError as e:
        await update.message.reply_text(f"‚ùå {e}")
        return

    try:
        # –í–ê–ñ–ù–û: —Ä–∞—Å—à–∏—Ä—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É time_repo.create_time_group, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞–ª name=...
        # –Ω–∞–ø—Ä–∏–º–µ—Ä: def create_time_group(group_key, profile_key, epoch, period, name=None): ...
        ok = time_repo.create_time_group(group_key, profile_key, epoch_iso, period, name=name)
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É: {e}")
        return

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    gk = html.escape(group_key)
    pk = html.escape(profile_key)
    nm = html.escape(name)
    await update.message.reply_text(
        f"‚úÖ –¢–∞–π–º-–≥—Ä—É–ø–ø–∞ <b>{nm}</b> (<code>{gk}</code>) —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
        f"‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å: <code>{pk}</code>\n"
        f"‚Ä¢ —ç–ø–æ—Ö–∞: {epoch_iso}\n"
        f"‚Ä¢ –ø–µ—Ä–∏–æ–¥: {period} –¥.",
        parse_mode="HTML",
    )

@require_admin
async def admin_time_groups_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–π–º-–≥—Ä—É–ø–ø—É"""
    if len(context.args) < 3:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_add_user <group_key> <user_id> <pos>")
        return

    gk = context.args[0]
    uid = int(context.args[1])
    pos = int(context.args[2])

    ok = time_repo.add_user_to_group(gk, uid, pos)
    if ok:
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {gk} (pos={pos})")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –≤ –≥—Ä—É–ø–ø—É {gk}")

@require_admin
async def admin_time_groups_remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–π–º-–≥—Ä—É–ø–ø—ã"""
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_remove_user <group_key> <user_id>")
        return

    gk = context.args[0]
    uid = int(context.args[1])

    ok = time_repo.remove_user_from_group(gk, uid)
    if ok:
        await update.message.reply_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {gk}")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑ –≥—Ä—É–ø–ø—ã {gk}")

@require_admin
async def admin_time_groups_set_pos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–π–º-–≥—Ä—É–ø–ø–µ"""
    if len(context.args) < 3:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_set_pos <group_key> <user_id> <pos>")
        return

    gk = context.args[0]
    uid = int(context.args[1])
    pos = int(context.args[2])

    ok = time_repo.set_user_pos(gk, uid, pos)
    if ok:
        await update.message.reply_text(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –≤ –≥—Ä—É–ø–ø–µ {gk} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {pos}")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")

@require_admin
async def admin_time_groups_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_show <group_key>")
        return

    gk = context.args[0].strip()
    info = time_repo.get_group_info(gk)
    if not info:
        await update.message.reply_text(f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{escape(gk)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="HTML")
        return

    # –î–æ—Å—Ç–∞—ë–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    profile_key = info.get("profile_key")
    profile_name = None
    try:
        p = time_repo.get_profile_info(profile_key)
        if p:
            profile_name = p.get("name")
    except Exception:
        pass

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø—ã
    epoch = info.get("epoch")                 # date
    period = int(info.get("period") or info.get("rotation_period_days") or 4)
    tz_name = info.get("tz_name") or "‚Äî"
    tz_offset_hours = int(info.get("tz_offset_hours") or 0)

    # –ò–Ω–¥–µ–∫—Å –¥–Ω—è —Ü–∏–∫–ª–∞ –∏ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    today = date.today()
    idx = _local_cycle_day({
        "epoch": epoch,
        "offset_days": 0,
        "tz_offset_hours": tz_offset_hours,
        "period": period,
    }, today)
    phase_label = _phase_label(idx)
    days_to_reset = (period - idx) % period
    next_reset_date = today + timedelta(days=days_to_reset)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Å—Ç–∏–ª–µ
    prof_part = escape(profile_name) if profile_name else escape(profile_key or "")
    header = (
        f"‚è± –ì—Ä—É–ø–ø–∞ {escape(info.get('key'))}, –ø—Ä–æ—Ñ–∏–ª—å {prof_part}"
        + (f" ({escape(profile_key)})" if profile_name else "")
        + "\n"
        f"Epoch: {epoch}, –ø–µ—Ä–∏–æ–¥: {period} –¥., TZ: {escape(tz_name)}\n"
        f"–¶–∏–∫–ª: {idx + 1}/{period} ({escape(phase_label)}). "
        f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {next_reset_date.strftime('%d.%m.%Y')}\n"
        f"–°–ª–æ—Ç—ã:"
    )

    # –°–ª–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è: 0..N ‚Äî ¬´HH:MM‚ÄìHH:MM "–ù–∞–∑–≤–∞–Ω–∏–µ"¬ª
    slot_lines = []
    for s in sorted(info.get("slots", []), key=lambda x: x.get("pos", 0)):
        nm = (s.get("name") or "").strip()
        # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ –±–∞–∑—ã
        if nm.startswith('"') and nm.endswith('"'):
            nm = nm[1:-1]

        nm_part = f' "{escape(nm)}"' if nm else ""
        slot_lines.append(f"{s['pos']}. {s['start']}‚Äì{s['end']}{nm_part}")

    if not slot_lines:
        slot_lines.append("‚Äî —Å–ª–æ—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏: `<base_pos> <user_id> –ò–º—è –§–∞–º–∏–ª–∏—è @username`
    member_lines = []
    for m in info.get("members", []):
        pos = int(m.get("base_pos") or 0)
        uid = m.get("user_id")
        fn = (m.get("first_name") or "").strip()
        ln = (m.get("last_name") or "").strip()
        un = (m.get("username") or "").strip()
        name_str = " ".join([x for x in [fn, ln] if x]).strip()
        user_part = name_str if name_str else str(uid)
        if un:
            user_part += f" @{escape(un)}"
        member_lines.append(f"{pos} {uid} {escape(user_part)}")
    if not member_lines:
        member_lines.append("‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç")

    msg = (
        header + "\n" +
        "\n".join(slot_lines) + "\n" +
        "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" +
        "\n".join(member_lines)
    )

    await update.message.reply_text(msg, parse_mode="HTML")

@require_admin
async def admin_time_groups_set_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ä–æ—Ç–∞—Ü–∏–∏"""
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_set_period <group_key> <days>")
        return

    gk = context.args[0]
    days = int(context.args[1])

    ok = time_repo.set_group_period(gk, days)
    if ok:
        await update.message.reply_text(f"‚úÖ –ü–µ—Ä–∏–æ–¥ —Ä–æ—Ç–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {gk} = {days} –¥.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∞")

@require_admin
async def admin_debug_date(update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_debug_date <–¥–∞—Ç–∞>")
        return
    raw = context.args[0]
    try:
        d = _parse_epoch_date(raw)
        await update.message.reply_text(f"RAW={raw!r}\nOK: {d.strftime('%d.%m.%Y')}")
    except Exception as e:
        await update.message.reply_text(f"RAW={raw!r}\nFAIL: {e}")

@require_admin
async def admin_time_groups_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —Ç–∞–π–º-–≥—Ä—É–ø–ø (+ –∫–æ—Ä–æ—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –∫–æ–º–∞–Ω–¥)."""
    try:
        rows = time_repo.list_groups() or []
        if not rows:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–π–º-–≥—Ä—É–ø–ø.")
            return

        def fmt_epoch(v):
            if isinstance(v, datetime):
                return v.date().isoformat()
            if isinstance(v, date):
                return v.isoformat()
            return str(v).strip() if v else "‚Äî"

        lines: list[str] = ["‚è∞ <b>–°–ø–∏—Å–æ–∫ —Ç–∞–π–º-–≥—Ä—É–ø–ø:</b>", ""]

        for g in rows:
            key = g["key"]
            info = time_repo.get_group_info(key) or {}

            # –¥–∞–Ω–Ω—ã–µ
            raw_name = (info.get("name") or key or "").strip()
            name = html.escape(raw_name)
            key_html = html.escape(key)
            profile_key = html.escape((info.get("profile_key") or "").strip())
            epoch = fmt_epoch(info.get("epoch"))
            period = int(info.get("period") or info.get("rotation_period_days") or 8)

            tz_name = html.escape((info.get("tz_name") or info.get("tz") or "Europe/Moscow").strip())
            try:
                offset = int(info.get("tz_offset_hours") or 0)
            except Exception:
                offset = 0

            # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"üë• {name} (<code>{key_html}</code>)" if raw_name.lower().startswith("–≥—Ä—É–ø–ø–∞ ") \
                     else f"üë• –ì—Ä—É–ø–ø–∞ {name} (<code>{key_html}</code>)"

            # –±–ª–æ–∫ –∏–Ω—Ñ–æ
            lines.append(header)
            lines.append(f"       –ü—Ä–æ—Ñ–∏–ª—å: <code>{profile_key}</code>")
            lines.append(f"       –≠–ø–æ—Ö–∞: {epoch}  –ü–µ—Ä–∏–æ–¥: {period} –¥–Ω.")
            lines.append(f"       TZ: {tz_name} ({offset}—á)")

            # —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ get_group_info -> "members"
            members = info.get("members") or []
            # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞—Ç–µ–º –ø–æ ID
            members = sorted(members, key=lambda m: (m.get("base_pos", 0), m.get("user_id", 0)))

            if members:
                for m in members:
                    uid = m.get("user_id") or "‚Äî"
                    first = (m.get("first_name") or "").strip()
                    last  = (m.get("last_name") or "").strip()
                    full_name = (first + " " + last).strip() or ""
                    username = f"@{m['username']}" if m.get("username") else ""
                    full_name = html.escape(full_name)
                    # üîπ uid ‚Äî –ò–º—è @username
                    lines.append(f"üîπ <code>{uid}</code> ‚Äî {full_name} {username}".rstrip())
            else:
                lines.append("")

            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã

        # –∫–æ—Ä–æ—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –≤–Ω–∏–∑—É
        lines.append(HELP_GROUPS_SHORT)

        await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.exception("admin_time_groups_list: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.")
        raise

@require_admin
async def admin_time_profile_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    profiles = time_repo.list_profiles()
    if not profiles:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    lines = ["‚åö <b>–ü—Ä–æ—Ñ–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏:</b>\n"]
    for p in profiles:
        tz = p["tz_name"] or f"MSK{int(p['tz_offset_hours']):+d}h"
        lines.append(f"üï∞Ô∏è <b>{p['name']}</b> (<code>{p['key']}</code>)")
        lines.append(f"       TZ: {tz}")
    lines.append("")
    lines.append(HELP_TIME_PROFILES_SHORT)
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

@require_admin
async def admin_time_profile_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–µ–º–µ–Ω–∏"""
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_profile_create <profile_key> <name...> [tz_name]\n"
            "–ü—Ä–∏–º–µ—Ä: /admin_time_profile_create vdk_12h ¬´–í–ª–∞–¥–∏–∫ 12—á¬ª Europe/Moscow"
        )
        return
    profile_key = context.args[0].strip()
    args = context.args[1:]
    tz_name = None
    if args and "/" in args[-1]:
        tz_name = args[-1]
        name_parts = args[:-1]
    else:
        name_parts = args
    name = " ".join(name_parts).strip()
    try:
        time_repo.create_profile(profile_key, name, tz_name=tz_name, tz_offset_hours=0)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: <b>{name}</b> (<code>{profile_key}</code>)", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

@require_admin
async def admin_time_profile_add_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    if len(context.args) < 4:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_profile_add_slot <profile_key> <pos> <HH:MM> <HH:MM> [name]\n"
            "–ü—Ä–∏–º–µ—Ä: /admin_time_profile_add_slot vdk_12h 0 08:00 20:00 –î–µ–Ω—å"
        )
        return
    profile_key = context.args[0].strip()
    try:
        pos = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå pos –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (0,1,2,...)")
        return
    start = context.args[2].strip()
    end = context.args[3].strip()
    name = " ".join(context.args[4:]).strip() if len(context.args) > 4 else None
    try:
        time_repo.add_slot(profile_key, pos, start, end, name=name)
        await update.message.reply_text(
            f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: –ø—Ä–æ—Ñ=<code>{profile_key}</code>, pos={pos}, {start}-{end}, name={name or '‚Äî'}",
            parse_mode="HTML"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")

@require_admin
async def admin_time_profile_clear_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_profile_clear_slots <profile_key>")
        return
    profile_key = context.args[0].strip()
    try:
        n = time_repo.clear_profile_slots(profile_key)
        await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {n} (–ø—Ä–æ—Ñ–∏–ª—å <code>{profile_key}</code>)", parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤: {e}")

@require_admin
async def admin_time_profile_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º-–ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø)"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_profile_delete <profile_key>")
        return

    profile_key = context.args[0].strip()

    try:
        deleted = time_repo.delete_time_profile(profile_key)
        if deleted:
            await update.message.reply_text(
                f"üóë –ü—Ä–æ—Ñ–∏–ª—å <b>{profile_key}</b> —É–¥–∞–ª—ë–Ω (—Å–ª–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∫–∞—Å–∫–∞–¥–Ω–æ).",
                parse_mode="HTML",
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å <b>{profile_key}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="HTML",
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å <b>{profile_key}</b>. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, –∫ –Ω–µ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã –≥—Ä—É–ø–ø—ã.\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}",
            parse_mode="HTML",
        )

@require_admin
async def admin_time_groups_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º-–≥—Ä—É–ø–ø—É –ø–æ –∫–ª—é—á—É"""
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_delete <group_key>")
        return

    group_key = context.args[0].strip()

    try:
        deleted = time_repo.delete_time_group(group_key)
        if deleted:
            await update.message.reply_text(
                f"üóë –ì—Ä—É–ø–ø–∞ <b>{group_key}</b> —É–¥–∞–ª–µ–Ω–∞ (—É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∫–∞—Å–∫–∞–¥–Ω–æ).",
                parse_mode="HTML",
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{group_key}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML",
            )
    except Exception as e:
        # –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã, –Ω–æ –ø–æ–∫–∞–∂–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É: {e}")

@require_admin
async def admin_time_groups_set_tz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IANA-—Ç–∞–π–º–∑–æ–Ω—É –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_groups_set_tz <group_key> <tz_name>")
        return

    group_key = context.args[0].strip()
    tz_name = context.args[1].strip()

    try:
        ok = time_repo.set_group_tz(group_key, tz_name)
        if ok:
            await update.message.reply_text(
                f"‚úÖ –î–ª—è –≥—Ä—É–ø–ø—ã <b>{group_key}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>{tz_name}</code>",
                parse_mode="HTML",
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{group_key}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML",
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TZ: {e}",
            parse_mode="HTML",
        )

@require_admin
async def admin_time_profile_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_time_profile_show <profile_key>")
        return

    pk = context.args[0].strip()
    info = time_repo.get_profile_info(pk)
    if not info:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å <b>{escape(pk)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
        return

    header = f"üóÇ –ü—Ä–æ—Ñ–∏–ª—å <b>{escape(info['name'] or info['key'])}</b> (key={escape(info['key'])}, TZ={escape(info.get('tz_name') or '-')})"
    slots = info.get("slots", [])
    if not slots:
        slots_text = "‚Äî —Å–ª–æ—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã"
    else:
        slots_text = "\n".join(
            f"{s['pos']}. {s['start']}‚Äì{s['end']} {escape(s.get('name') or '')}" for s in slots
        )

    msg = f"{header}\n–°–ª–æ—Ç—ã:\n{slots_text}"
    await update.message.reply_text(msg, parse_mode="HTML")
