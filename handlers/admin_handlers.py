# -*- coding: utf-8 -*-
"""
–ê–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥).
‚Äî ID –ø–µ—á–∞—Ç–∞—é—Ç—Å—è –≤ <code>‚Ä¶</code> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è,
‚Äî ¬´–æ–∂–∏–¥–∞—é—â–∏–µ¬ª –∏ ¬´–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ¬ª –±–ª–æ–∫–∞–º–∏,
‚Äî —Ö–≤–æ—Å—Ç ¬´–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã¬ª —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ handlers/help.headlers.help.txt (–µ—Å—Ç—å fallback),
‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö,
‚Äî –≤–∫–ª—é—á–∞–µ—Ç –∞–ª–∏–∞—Å—ã remove_user / update_all_users –∏ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ legacy-–≥—Ä—É–ø–ø, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –∏–º–ø–æ—Ä—Ç –∏–∑ main.py.
"""

from __future__ import annotations

import logging
import inspect
from html import escape
from pathlib import Path
from typing import Any, Iterable, Optional, Callable

from telegram import Update
from telegram.ext import ContextTypes

from utils.decorators import require_admin
from database.repository import UserRepository
from handlers.help_texts import HELP_USERS_SHORT
logger = logging.getLogger(__name__)

def _load_admin_users_footer() -> str:
    # –ë–µ—Ä—ë–º –∫–æ—Ä–æ—Ç–∫—É—é —à–ø–∞—Ä–≥–∞–ª–∫—É –∏–∑ help_texts, –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ
    return HELP_USERS_SHORT

# --- –í _norm_user –î–û–ë–ê–í–¨ –ø–æ–ª–µ 'status' –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å
def _norm_user(u: Any) -> dict[str, Any]:
    """–ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É."""
    def g(obj, *keys, default=None):
        for k in keys:
            if isinstance(obj, dict):
                if k in obj and obj[k] is not None:
                    return obj[k]
            else:
                if hasattr(obj, k):
                    v = getattr(obj, k)
                    if v is not None:
                        return v
        return default

    uid = g(u, "user_id", "telegram_id", "tg_id", "id")
    fn = (g(u, "first_name", "firstname", "firstName", default="") or "").strip()
    ln = (g(u, "last_name", "lastname", "lastName", default="") or "").strip()
    full = (" ".join([x for x in (fn, ln) if x]) or (g(u, "name", "full_name", default="") or "")).strip()
    username = (g(u, "username", "user_name", "login", default="") or "").lstrip("@")
    status = (g(u, "status", default="") or "").strip().lower()
    is_approved = bool(
        g(u, "is_approved", "approved", default=False)
        or status in {"approved", "active", "ok"}
    )
    role = (g(u, "role", "user_role", default="") or "").strip().lower()
    is_admin = bool(g(u, "is_admin", "admin", default=False) or role in {"admin", "owner", "root"})
    group_key = g(u, "group_key", "group", "group_id", "group_name", default=None)

    return {
        "uid": uid,
        "name": full,
        "username": username,
        "is_approved": is_approved,
        "is_admin": is_admin,
        "group_key": group_key,
        "status": status,
    }


def _try_repo_funcs(module, names: Iterable[str]) -> Optional[Callable[..., Any]]:
    """–í–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–∞–±–æ—Ä–∞ –∏–º—ë–Ω."""
    for n in names:
        fn = getattr(module, n, None)
        if callable(fn):
            return fn
    return None


def _safe_call(fn: Optional[Callable[..., Any]], *args, **kwargs) -> Any:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    –ë–æ–ª—å—à–µ –ù–ï –ø–æ–¥—Å–æ–≤—ã–≤–∞–µ–º None –≤—Å–ª–µ–ø—É—é ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ–±–∏–Ω–¥–µ–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Ö–æ–∂ –Ω–∞ conn/db.
    """
    if fn is None:
        return None
    try:
        return fn(*args, **kwargs)
    except TypeError as e:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω—É–∂–µ–Ω "conn"/"db" –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        try:
            sig = inspect.signature(fn)
            params = list(sig.parameters.values())

            # –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É (bound), –≤—ã–∫–∏–¥—ã–≤–∞–µ–º "self"
            if getattr(fn, "__self__", None) is not None and params:
                params = params[1:]

            name0 = params[0].name if params else ""
            if name0 in {"conn", "db", "session", "connection"}:
                return fn(None, *args, **kwargs)
        except Exception:
            pass

        logger.warning("Repo call TypeError: %s", e)
        return None
    except Exception as e:
        logger.warning("Repo call failed: %s", e)
        return None




def _format_user_line(u: dict[str, Any], with_icon: bool = True) -> str:
    icon = "üëë" if u.get("is_admin") else "üë§"
    uid = u.get("uid")
    name = escape((u.get("name") or "").strip()) or str(uid)
    uname = u.get("username")
    piece = f"<code>{uid}</code> ‚Äî {name}"
    if uname:
        piece += f" @{escape(uname)}"
    return f"{icon} {piece}" if with_icon else piece


def _get_all_users() -> list[dict[str, Any]]:
    """–î–æ—Å—Ç–∞—ë—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_repository (—Å fallback –ø–æ –∏–º–µ–Ω–∞–º —Ñ—É–Ω–∫—Ü–∏–π)."""
    try:
        from database import user_repository as user_repo
    except Exception as e:
        logger.error("user_repository import failed: %s", e)
        return []

    getter = _try_repo_funcs(
        user_repo,
        (
            "list_users",
            "list_all_users",
            "get_all_users",
            "all_users",
            "users_all",
            "get_users",
        ),
    )
    raw = _safe_call(getter) or []
    return [_norm_user(x) for x in raw if x is not None]


# --- –ó–ê–ú–ï–ù–ò —Ü–µ–ª–∏–∫–æ–º _get_pending_users –Ω–∞:
# --- –ó–ê–ú–ï–ù–ò —Ü–µ–ª–∏–∫–æ–º _get_pending_users –Ω–∞:
def _get_pending_users() -> list[dict[str, Any]]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´–æ–∂–∏–¥–∞—é—â–∏—Ö¬ª —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É is_approved=False
    –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ
    list_pending/pending_* —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞.
    """
    all_users = _get_all_users()
    return [u for u in all_users if not u.get("is_approved")]

def _call_repo_variants(fn: Callable[..., Any], *base_args) -> Optional[bool]:
    """
    –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
    (user_id), (user_id, True), (None, user_id), (None, user_id, True).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏–Ω–∞—á–µ bool-–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    variants = [
        base_args,
        (*base_args, True),
        (None, *base_args),
        (None, *base_args, True),
    ]
    for args in variants:
        try:
            res = fn(*args)
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
            return True if res is None else bool(res)
        except TypeError:
            continue
        except Exception as e:
            logger.warning("Repo call failed for %s%r: %s", getattr(fn, "__name__", fn), args, e)
            continue
    return None

def _try_signatures(fn: Callable[..., Any], argsets: list[tuple]) -> Optional[bool]:
    """
    –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å fn —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    –î–ª—è –∫–∞–∂–¥–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –ø—Ä–æ–±—É–µ–º –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤–µ–¥—É—â–∏–º None (–Ω–∞ —Å–ª—É—á–∞–π conn/db).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ; –∏–Ω–∞—á–µ bool —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (None -> True).
    """
    for args in argsets:
        for prefix in ((), (None,)):
            try:
                res = fn(*prefix, *args)
                return True if res is None else bool(res)
            except TypeError:
                continue
            except Exception as e:
                logger.warning("Repo call failed for %s%r: %s", getattr(fn, "__name__", fn), (prefix + args), e)
                continue
    return None


def _approve_user_repo(user_id: int, admin_id: Optional[int] = None) -> bool:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å:
      - approve_user(user_id)
      - approve_user(user_id, admin_id)
      - –∏ —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –≤–µ–¥—É—â–∏–º conn/None
    """
    try:
        from database import user_repository as user_repo
    except Exception as e:
        logger.error("user_repository import failed: %s", e)
        return False

    names = (
        "approve_user", "approve", "admin_approve",
        "set_approved", "set_is_approved", "mark_approved",
        "accept_user", "activate_user", "set_status",
    )
    argsets: list[tuple] = [(user_id,)]
    if admin_id is not None:
        argsets.insert(0, (user_id, admin_id))  # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å admin_id

    for name in names:
        fn = getattr(user_repo, name, None)
        if callable(fn):
            ok = _try_signatures(fn, argsets)
            if ok is not None:
                return ok
    return False

def _remove_from_pending_repo(user_id: int) -> Optional[bool]:
    """
    –ï—Å–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å —è–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∏—Å—Ç–∫–∏ pending ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.
    –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ (user_id) [+ –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ–¥—É—â–∏–π None].
    """
    try:
        from database import user_repository as user_repo
    except Exception:
        return None

    names = (
        "remove_from_pending", "delete_pending", "clear_pending",
        "pending_remove", "remove_pending_user", "unset_pending",
    )
    for name in names:
        fn = getattr(user_repo, name, None)
        if callable(fn):
            return _try_signatures(fn, [(user_id,)])
    return None

def _set_group_repo(user_id: int, group_key: str) -> Optional[bool]:
    try:
        from database import group_repository as group_repo
    except Exception:
        return None
    if not group_repo:
        return None

    for name in ("set_user_group", "assign_user_to_group", "set_group"):
        fn = getattr(group_repo, name, None)
        if callable(fn):
            return _try_signatures(fn, [(user_id, group_key)])
    return None


# ============================ handlers =====================================

@require_admin
async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å–Ω–∞—á–∞–ª–∞ –æ–∂–∏–¥–∞—é—â–∏–µ, –∑–∞—Ç–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ. ID –≤ <code>‚Ä¶</code>."""
    repo = UserRepository()
    all_users = repo.get_all_users()
    pending = [u for u in all_users if not u.get("is_approved")]
    approved = [u for u in all_users if u.get("is_approved")]

    def display_name(u: dict) -> str:
        fn = (u.get("first_name") or "").strip()
        ln = (u.get("last_name") or "").strip()
        full = f"{fn} {ln}".strip()
        return full or (u.get("username") or "").lstrip("@") or str(u.get("user_id"))

    # –∞–¥–º–∏–Ω—ã –≤–ø–µ—Ä—ë–¥, –∑–∞—Ç–µ–º –ø–æ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
    def sort_key(u: dict):
        is_admin = str(u.get("role", "")).lower() == "admin"
        return (not is_admin, display_name(u).lower())

    approved.sort(key=sort_key)

    lines: list[str] = []
    if pending:
        lines.append("<b>‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>")
        for u in pending:
            tail = f" @{escape(u['username'])}" if u.get("username") else ""
            lines.append(f"‚ùî <code>{u['user_id']}</code> ‚Äî {escape(display_name(u))}{tail}")
        lines.append("")

    lines.append("<b>üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n")
    if approved:
        for u in approved:
            icon = "üî∏" if str(u.get("role", "")).lower() == "admin" else "üîπ"
            tail = f" @{escape(u['username'])}" if u.get("username") else ""
            lines.append(f"{icon} <code>{u['user_id']}</code> ‚Äî {escape(display_name(u))}{tail}")
    else:
        lines.append("‚Äî –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç")

    footer = _load_admin_users_footer()
    if footer:
        lines.append("")
        lines.append(footer)

    await update.message.reply_text("\n".join(lines), parse_mode="HTML")


@require_admin
async def admin_pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è (–ø–æ–¥—Ä–æ–±–Ω–æ)."""
    repo = UserRepository()
    pend = repo.get_pending_users()
    if not pend:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    def display_name(u: dict) -> str:
        fn = (u.get("first_name") or "").strip()
        ln = (u.get("last_name") or "").strip()
        full = f"{fn} {ln}".strip()
        return full or (u.get("username") or "").lstrip("@") or str(u.get("user_id"))

    lines = ["‚åõÔ∏è <b>–û–∂–∏–¥–∞—é—â–∏–µ:</b>"]
    for u in pend:
        tail = f" @{escape(u['username'])}" if u.get("username") else ""
        lines.append(f"{escape(display_name(u))} <code>{u['user_id']}</code>{tail}")
    await update.message.reply_text("\n".join(lines), parse_mode="HTML")


@require_admin
async def admin_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä–∏—Ç—å: /admin_approve <user_id> [group_key]."""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_approve</code> <i>user_id</i> [<i>group_key</i>]",
            parse_mode="HTML",
        )
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    admin_id = update.effective_user.id if update.effective_user else None
    repo = UserRepository()
    ok = repo.approve_user(user_id, admin_id or user_id)

    msg_parts = []
    if ok:
        msg_parts.append(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –æ–¥–æ–±—Ä–µ–Ω")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>",
            parse_mode="HTML",
        )
        return

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
    if len(context.args) > 1:
        group_key = (context.args[1] or "").strip()
        if group_key:
            try:
                from database import group_repository as group_repo
                set_fn = getattr(group_repo, "set_user_group", None) or getattr(group_repo, "assign_user_to_group", None)
                g_ok = bool(set_fn(user_id, group_key)) if callable(set_fn) else False
                if g_ok:
                    msg_parts.append(f"(–≥—Ä—É–ø–ø–∞ <code>{escape(group_key)}</code> –Ω–∞–∑–Ω–∞—á–µ–Ω–∞)")
                else:
                    msg_parts.append(f"(‚ö†Ô∏è –≥—Ä—É–ø–ø–∞ <code>{escape(group_key)}</code> –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞)")
            except Exception:
                msg_parts.append("(‚ö†Ô∏è –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã)")

    await update.message.reply_text(" ".join(msg_parts), parse_mode="HTML")


@require_admin
async def admin_removeuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å: /admin_removeuser <user_id> (—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ UserRepository)."""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_removeuser</code> <i>user_id</i>",
            parse_mode="HTML",
        )
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    repo = UserRepository()
    ok = repo.remove_user(user_id)

    if ok:
        await update.message.reply_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É–¥–∞–ª—ë–Ω", parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>.", parse_mode="HTML")

# –ê–ª–∏–∞—Å –ø–æ–¥ –∏–º–ø–æ—Ä—Ç –≤ main.py
remove_user = admin_removeuser

@require_admin
async def admin_set_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É: /admin_set_group <user_id> <group_key>."""
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_set_group</code> <i>user_id</i> <i>group_key</i>", parse_mode="HTML")
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    group_key = context.args[1].strip()

    try:
        from database import group_repository as group_repo
    except Exception as e:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return

    set_fn = _try_repo_funcs(group_repo, ("set_user_group", "assign_user_to_group", "set_group"))
    ok = bool(_safe_call(set_fn, user_id, group_key))
    if ok:
        await update.message.reply_text(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ <code>{escape(group_key)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>", parse_mode="HTML")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É", parse_mode="HTML")


@require_admin
async def admin_unset_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –≥—Ä—É–ø–ø—É: /admin_unset_group <user_id>."""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_unset_group</code> <i>user_id</i>", parse_mode="HTML")
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    try:
        from database import group_repository as group_repo
    except Exception as e:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return

    unset_fn = _try_repo_funcs(group_repo, ("unset_user_group", "remove_user_from_group", "unset_group"))
    ok = bool(_safe_call(unset_fn, user_id))
    if ok:
        await update.message.reply_text(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —Å–Ω—è—Ç–∞ –≥—Ä—É–ø–ø–∞", parse_mode="HTML")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", parse_mode="HTML")


@require_admin
async def admin_list_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: /admin_list_group <group_key>."""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_list_group</code> <i>group_key</i>", parse_mode="HTML")
        return
    group_key = context.args[0].strip()

    # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ –∏–∑ group_repository
    try:
        from database import group_repository as group_repo
    except Exception:
        group_repo = None

    rows = []
    if group_repo:
        getter = _try_repo_funcs(group_repo, ("list_users_in_group", "get_group_users", "group_users"))
        rows = _safe_call(getter, group_key) or []

    if not rows:
        # fallback: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        rows = [u for u in _get_all_users() if (u.get("group_key") or "") == group_key]

    if not rows:
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ <code>{escape(group_key)}</code>: ‚Äî –ø—É—Å—Ç–æ", parse_mode="HTML")
        return

    lines = [f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ <code>{escape(group_key)}</code>:"]
    for u in rows:
        if not isinstance(u, dict) or "uid" not in u:
            u = _norm_user(u)
        lines.append(_format_user_line(u, with_icon=True))
    await update.message.reply_text("\n".join(lines), parse_mode="HTML")


@require_admin
async def admin_update_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π (username/–∏–º–µ–Ω–∞) –≤ –ë–î –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    try:
        from database import user_repository as user_repo
    except Exception as e:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return

    updater = _try_repo_funcs(user_repo, ("update_all_users", "refresh_all_users", "admin_update_all_users"))
    res = _safe_call(updater)

    # –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è
    if res is None:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    # –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ–µ ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if isinstance(res, int):
        if res > 0:
            await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: <b>{res}</b>", parse_mode="HTML")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ dict —Å–æ —Å—á—ë—Ç—á–∏–∫–æ–º
    if isinstance(res, dict) and "updated" in res:
        n = int(res.get("updated") or 0)
        if n > 0:
            await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: <b>{n}</b>", parse_mode="HTML")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (True/False)
    if isinstance(res, bool):
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ" if res else "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return

    # –ù–µ–ø—Ä–µ–¥–≤–∏–¥—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    await update.message.reply_text("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

# –ê–ª–∏–∞—Å –ø–æ–¥ –∏–º–ø–æ—Ä—Ç –≤ main.py
async def update_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await admin_update_all_users(update, context)


@require_admin
async def admin_promote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞: /admin_promote <user_id>"""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_promote</code> <i>user_id</i>", parse_mode="HTML")
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    try:
        from database import user_repository as user_repo
    except Exception as e:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return

    try_names_bool = ("set_admin", "set_is_admin")
    try_names_one  = ("promote_user", "make_admin")
    try_names_role = ("set_role", "update_role", "change_role")

    ok = False
    for name in try_names_bool:
        fn = getattr(user_repo, name, None)
        if callable(fn):
            ok = bool(_safe_call(fn, user_id, True))
            if ok is not None:
                break

    if not ok:
        for name in try_names_one:
            fn = getattr(user_repo, name, None)
            if callable(fn):
                ok = bool(_safe_call(fn, user_id))
                if ok is not None:
                    break

    if not ok:
        for name in try_names_role:
            fn = getattr(user_repo, name, None)
            if callable(fn):
                ok = bool(_safe_call(fn, user_id, "admin"))
                if ok is not None:
                    break

    if ok:
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>", parse_mode="HTML")


@require_admin
async def admin_demote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞: /admin_demote <user_id>"""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/admin_demote</code> <i>user_id</i>", parse_mode="HTML")
        return
    try:
        user_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    try:
        from database import user_repository as user_repo
    except Exception as e:
        await update.message.reply_text(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return

    try_names_bool = ("set_admin", "set_is_admin")
    try_names_one  = ("demote_user", "remove_admin")
    try_names_role = ("set_role", "update_role", "change_role")

    ok = False
    for name in try_names_bool:
        fn = getattr(user_repo, name, None)
        if callable(fn):
            ok = bool(_safe_call(fn, user_id, False))
            if ok is not None:
                break

    if not ok:
        for name in try_names_one:
            fn = getattr(user_repo, name, None)
            if callable(fn):
                ok = bool(_safe_call(fn, user_id))
                if ok is not None:
                    break

    if not ok:
        for name in try_names_role:
            fn = getattr(user_repo, name, None)
            if callable(fn):
                ok = bool(_safe_call(fn, user_id, "user"))
                if ok is not None:
                    break

    if ok:
        await update.message.reply_text(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞", parse_mode="HTML")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>", parse_mode="HTML")


# ===== –ü—Ä–æ—Å—Ç–æ–π /admin_help (—á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç –≤ main.py –Ω–µ –ø–∞–¥–∞–ª) ===============
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    footer = _load_admin_users_footer()
    await update.message.reply_text(footer, parse_mode="HTML")


# ===== –ó–∞–≥–ª—É—à–∫–∏ legacy-–≥—Ä—É–ø–ø, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –∏–º–ø–æ—Ä—Ç –∏–∑ main.py =============

async def admin_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è Legacy –∫–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –ø–µ—Ä–µ–µ—Ö–∞–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_time_groups_*.", parse_mode="HTML")

async def admin_group_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_groups(update, context)

async def admin_group_rename(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_groups(update, context)

async def admin_group_set_offset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_groups(update, context)

async def admin_group_set_epoch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_groups(update, context)

async def admin_group_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_groups(update, context)
