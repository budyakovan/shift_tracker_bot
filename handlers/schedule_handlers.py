#/handlers/schedule_handlers.py ===
import re
from datetime import date, datetime, time, timedelta, timezone
from zoneinfo import ZoneInfo
from typing import Dict, Any, Optional, List
from collections import Counter
from html import escape
from telegram import Update
from telegram.ext import ContextTypes

from database.connection import db_connection  # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from database import time_repository as time_repo
from database.location_repository import get_locations
from logic.duty import _local_cycle_day, _phase_kind
from logic.duty import parse_date_arg
from logic.duty import resolve_slot_ddnn_alternating as resolve4
from logic.duty import resolve_slot_ddnn_alt_8 as resolve8

from database.absence_repository import get_absence_on_date
from datetime import date  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from telegram.constants import ParseMode  # –¥–ª—è parse_mode=HTML

from handlers.absence_banner import reply_with_absence_banner

WEEKDAY_RU = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –ë–∞–∑–æ–≤—ã–µ –æ–∫–Ω–∞ —Å–º–µ–Ω (–≤ TZ –≥—Ä—É–ø–ø—ã):
# 0,1 ‚Üí –¥–µ–Ω—å 08:00‚Äì20:00; 2,3 ‚Üí –Ω–æ—á—å 20:00‚Äì08:00
SLOT_WINDOWS: Dict[int, tuple[str, str]] = {
    0: ("08:00", "20:00"),
    1: ("08:00", "20:00"),
    2: ("20:00", "08:00"),
    3: ("20:00", "08:00"),
}

def _weekday_ru(d: date) -> str:
    return WEEKDAY_RU[d.weekday()]

def _parse_hhmm(s: str) -> time:
    hh, mm = s.split(":")
    return time(int(hh), int(mm))

def _tz_from_offset_hours(offset_hours: int) -> timezone:
    return timezone(timedelta(hours=int(offset_hours or 0)))

def _get_group_tz(info: Dict[str, Any]) -> timezone | ZoneInfo:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç TZ –≥—Ä—É–ø–ø—ã:
    - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º IANA –∏–∑ info['tz'] –∏–ª–∏ info['tz_name']
    - –∏–Ω–∞—á–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ info['tz_offset_hours']
    - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Europe/Moscow
    """
    tz_name = (info.get("tz") or info.get("tz_name") or "").strip()
    if tz_name:
        try:
            return ZoneInfo(tz_name)
        except Exception:
            pass
    return _tz_from_offset_hours(int(info.get("tz_offset_hours") or 0))

def _detect_user_tz_name(user_id: int) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users:
      - –∫–æ–ª–æ–Ω–∫–∞ tz –∏–ª–∏ tz_name (IANA)
      - –∏–ª–∏ tz_offset_hours (—Ü–µ–ª–æ–µ)
    –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º None (–¥–∞–ª—å—à–µ –≤–æ–∑—å–º—ë–º Europe/Moscow).
    """
    try:
        conn = db_connection.get_connection()
        cur = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        cur.execute("""
            SELECT column_name FROM information_schema.columns
            WHERE table_schema='public' AND table_name='users'
        """)
        cols = {r[0] for r in cur.fetchall()}

        if 'tz' in cols or 'tz_name' in cols:
            col = 'tz' if 'tz' in cols else 'tz_name'
            cur.execute(f"SELECT {col} FROM users WHERE user_id = %s LIMIT 1", (user_id,))
            row = cur.fetchone()
            cur.close()
            if row and row[0]:
                return str(row[0]).strip()

        if 'tz_offset_hours' in cols:
            cur.execute("SELECT tz_offset_hours FROM users WHERE user_id = %s LIMIT 1", (user_id,))
            row = cur.fetchone()
            cur.close()
            if row is not None and row[0] is not None:
                # –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –≤–µ—Ä–Ω—ë–º –ø—Å–µ–≤–¥–æ-—Å—Ç—Ä–æ–∫—É
                return f"FIXED:{int(row[0])}"
        cur.close()
    except Exception:
        # –Ω–µ –ø–∞–¥–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º None
        pass
    return None

def _get_user_tz(update: Update) -> timezone | ZoneInfo:
    """
    –ò—Ç–æ–≥–æ–≤—ã–π TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - users.tz/users.tz_name ‚Üí ZoneInfo(...)
    - FIXED:<h> ‚Üí timezone(hours=h)
    - –∏–Ω–∞—á–µ Europe/Moscow
    """
    uid = update.effective_user.id
    tz_name = _detect_user_tz_name(uid)
    if tz_name:
        if tz_name.startswith("FIXED:"):
            try:
                off = int(tz_name.split(":", 1)[1])
                return _tz_from_offset_hours(off)
            except Exception:
                pass
        try:
            return ZoneInfo(tz_name)
        except Exception:
            pass
    # –¥–µ—Ñ–æ–ª—Ç
    return ZoneInfo("Europe/Moscow")

def _convert_range_for_user(on_date: date,
                            start_hhmm: str,
                            end_hhmm: str,
                            tz_from,
                            tz_to) -> tuple[str, str]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª start‚Äìend –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ tz_from –≤ tz_to.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç ¬´–ø–µ—Ä–µ–≤–∞–ª —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HH:MM, HH:MM (—Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–∫–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    """
    s_t = _parse_hhmm(start_hhmm)
    e_t = _parse_hhmm(end_hhmm)

    start_dt = datetime.combine(on_date, s_t, tzinfo=tz_from)
    end_dt = datetime.combine(on_date, e_t, tzinfo=tz_from)
    if end_dt <= start_dt:
        end_dt += timedelta(days=1)

    start_user = start_dt.astimezone(tz_to)
    end_user = end_dt.astimezone(tz_to)

    return start_user.strftime("%H:%M"), end_user.strftime("%H:%M")

def _phase_kind_for_group(info: Dict[str, Any], on_date: date) -> str:
    idx = _local_cycle_day({
        "epoch": info.get("epoch"),
        "offset_days": 0,
        "tz_offset_hours": int(info.get("tz_offset_hours") or 0),
        "period": int(info.get("period") or info.get("rotation_period_days") or 4),
    }, on_date)
    return _phase_kind(idx)  # 'day'|'night'|'off'

def _slot_idx_for_member(info: Dict[str, Any], on_date: date, base_pos: int) -> Optional[int]:
    epoch = info.get("epoch")
    period = int(info.get("period") or info.get("rotation_period_days") or 4)
    if period == 8:
        return resolve8(epoch, 8, base_pos, on_date)
    return resolve4(epoch, 4, base_pos, on_date)

def _choose_group_window(info: Dict[str, Any], on_date: date, used_slots: List[int]) -> tuple[str, str]:
    """
    –í—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã (–≤ TZ –≥—Ä—É–ø–ø—ã) –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:
    - –µ—Å–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å—Ç—å —Å–ª–æ—Ç—ã ‚Üí –±–µ—Ä–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–ª–æ—Ç –∏ –µ–≥–æ –æ–∫–Ω–æ;
    - –∏–Ω–∞—á–µ ‚Üí –æ—Ç —Ñ–∞–∑—ã day/night –≤—ã–±–∏—Ä–∞–µ–º 08‚Äì20 –∏–ª–∏ 20‚Äì08.
    """
    if used_slots:
        pos, _ = Counter(used_slots).most_common(1)[0]
        if pos in SLOT_WINDOWS:
            return SLOT_WINDOWS[pos]

    # fallback –ø–æ —Ñ–∞–∑–µ
    kind = _phase_kind_for_group(info, on_date)
    if kind == "night":
        return ("20:00", "08:00")
    else:
        return ("08:00", "20:00")

def _group_display_name(info: Dict[str, Any]) -> str:
    name = (info.get("name") or "").strip()
    return name or str(info.get("key") or "–ì—Ä—É–ø–ø–∞")

def _member_line(m: Dict[str, Any], label: str) -> str:
    fn = (m.get("first_name") or "").strip()
    ln = (m.get("last_name") or "").strip()
    un = (m.get("username") or "").strip()
    display = (f"{fn} {ln}".strip() or (f"@{un}" if un else str(m.get("user_id"))))
    if un and f"@{un}" not in display:
        display += f" @{un}"
    return f'‚Ä¢ {display} ‚Äî "{label}"'

def _member_display(m: Dict[str, Any]) -> str:
    fn = (m.get("first_name") or "").strip()
    ln = (m.get("last_name") or "").strip()
    un = (m.get("username") or "").strip()
    label = (f"{escape(fn)} {escape(ln)}").strip() or (f"@{escape(un)}" if un else str(m.get("user_id")))
    if un and f"@{un}" not in label:
        label += f" @{escape(un)}"
    return label

def _slot_line(slot: Dict[str, Any]) -> str:
    # slot: {"pos": int, "start": "HH:MM", "end": "HH:MM", "name": "..."}
    nm = escape(slot.get("name") or "")
    return f"{slot['start']}‚Äì{slot['end']} {nm} (—Å–ª–æ—Ç {slot['pos']})"

def _resolve_slot_for_member(info: Dict[str, Any], on_date: date, base_pos: int) -> Optional[int]:
    """–í–µ—Ä–Ω—ë—Ç –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞ (int) –∏–ª–∏ None (–µ—Å–ª–∏ –æ—Ç–¥—ã—Ö –≤ period=8)."""
    epoch = info.get("epoch")                      # date
    period = int(info.get("period") or info.get("rotation_period_days") or 4)
    if period == 8:
        return resolve8(epoch, 8, base_pos, on_date)
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º 4 (–î–î/–ù–ù –±–µ–∑ OFF)
    return resolve4(epoch, 4, base_pos, on_date)

# ‚îÄ‚îÄ helper: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã ¬´–ì—Ä—É–ø–ø–∞ <–ò–º—è>¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _group_title(info: Dict[str, Any]) -> str:
    # –í –ë–î –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ã—á–Ω–æ ¬´–°–º–µ–Ω–∞ –§–∞–º–∏–ª–∏—è¬ª ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ì—Ä—É–ø–ø–∞ –§–∞–º–∏–ª–∏—è¬ª
    raw = (info.get("name") or info.get("key") or "").strip()
    title = raw.replace("–°–º–µ–Ω–∞", "–ì—Ä—É–ø–ø–∞").strip() if raw else "–ì—Ä—É–ø–ø–∞"
    return f"üë∑ {escape(title)}"


# ‚îÄ‚îÄ –ù–û–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï –î–õ–Ø –û–ë–ó–û–†–ê –ü–û –í–°–ï–ú –ì–†–£–ü–ü–ê–ú (/next –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _assignments_for_date(on_date: date) -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –Ω–∞ –¥–∞—Ç—É on_date –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

    üóì –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 2025-09-21
    üë∑ –ì—Ä—É–ø–ø–∞ –ê—Ä—á–∞–∫–æ–≤
    ‚Ä¢ –ò–º—è @username
    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ üè¢/üè†
    ...
    """
    lines: List[str] = []
    groups = time_repo.list_groups()  # [{'key', 'profile_key', ...}]
    if not groups:
        return lines

    for g in groups:
        info = time_repo.get_group_info(g["key"])
        if not info:
            continue

        # –ö–∞–∫–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç—É –¥–∞—Ç—É
        slots = info.get("slots", []) or []
        members = info.get("members", []) or []
        group_block: List[str] = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        group_block.append(_group_title(info))

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        any_working = False
        for m in members:
            base_pos = int(m.get("base_pos") or 0)
            slot_idx = _resolve_slot_for_member(info, on_date, base_pos)
            if slot_idx is None:
                # –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ (–≤ 8-–¥–Ω–µ–≤–Ω–æ–π —Å—Ö–µ–º–µ OFF) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue

            slot = next((s for s in slots if s.get("pos") == slot_idx), None)
            if not slot:
                continue

            # 1-—è —Å—Ç—Ä–æ–∫–∞ ‚Äî ¬´‚Ä¢ –ò–º—è @username¬ª
            display = _member_display(m)
            group_block.append(f"‚Ä¢ {display}")

            # 2-—è —Å—Ç—Ä–æ–∫–∞ ‚Äî ¬´<–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞> [üè¢/üè†]¬ª
            slot_name = (slot.get("name") or "").strip()
            if not slot_name:
                # –§–æ–ª–ª–±–µ–∫ –Ω–∞ –∫—Ä–∞—Ç–∫–æ–µ –∏–º—è, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
                slot_name = f"–°–ª–æ—Ç {slot.get('pos')}"
            badge = _badge_location(int(m.get("user_id")), on_date, info.get("key"))
            group_block.append(f"{escape(slot_name)}{badge}")

            any_working = True

        # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äî –Ω–µ —à—É–º–∏–º –ø—É—Å—Ç—ã–º –±–ª–æ–∫–æ–º
        if not any_working:
            continue

        # –î–æ–±–∞–≤–∏–º –±–ª–æ–∫ –∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        lines.extend(group_block)
        lines.append("")

    # –£–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—à–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if lines and lines[-1] == "":
        lines.pop()

    return lines

def _my_assignments_for_date(uid: int, on_date: date) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    lines: List[str] = []
    groups = time_repo.list_groups()
    for g in groups:
        info = time_repo.get_group_info(g["key"])
        if not info:
            continue

        me = next((m for m in info.get("members", []) if int(m.get("user_id")) == int(uid)), None)
        if not me:
            continue

        # –≤—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ—Ç
        slot_idx = _resolve_slot_for_member(info, on_date, int(me.get("base_pos") or 0))
        if slot_idx is None:
            # –æ—Ç–¥—ã—Ö ‚Äî –ø–æ–∫–∞–∂–µ–º —è–≤–Ω–æ
            lines.append(
                f"‚Ä¢ <b>{escape(info['key'])}</b> ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π (–æ—Ç–¥—ã—Ö)"
            )
            continue

        slots = info.get("slots", [])
        slot = next((s for s in slots if s["pos"] == slot_idx), None)
        if slot:
            lines.append(
                f"‚Ä¢ <b>{escape(info['key'])}</b> ‚Äî {_slot_line(slot)}"
            )
        else:
            lines.append(
                f"‚Ä¢ <b>{escape(info['key'])}</b> ‚Äî —Å–ª–æ—Ç {slot_idx}"
            )
    return lines

def _ru_weekday(d: date) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[d.weekday()]

def _my_assignments_compact(uid: int, on_date: date) -> list[str]:
    """
    –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É:
    —Ñ–æ—Ä–º–∞—Ç: HH:MM‚ÄìHH:MM "–ù–∞–∑–≤–∞–Ω–∏–µ"
    –ì—Ä—É–ø–ø—ã –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ–º, —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ —Å–ª–æ—Ç—ã. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ ‚Äî –≤–µ—Ä–Ω—ë–º [].
    """
    results: list[str] = []
    for g in (time_repo.list_groups() or []):
        info = time_repo.get_group_info(g["key"])
        if not info:
            continue

        me = next((m for m in info.get("members", []) if int(m.get("user_id")) == int(uid)), None)
        if not me:
            continue

        epoch = info.get("epoch")                       # date
        period = int(info.get("period") or info.get("rotation_period_days") or 4)
        base_pos = int(me.get("base_pos") or 0)

        # –≤—ã–±–µ—Ä–µ–º –Ω—É–∂–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä
        if period == 8 and resolve8 is not None:
            slot_idx = resolve8(epoch, period, base_pos, on_date)
        else:
            slot_idx = resolve4(epoch, 4, base_pos, on_date)

        if slot_idx is None:
            # –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ –≤ 8-–¥–Ω–µ–≤–Ω–æ–π —Å—Ö–µ–º–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É (–ø—É—Å—Ç—å –≤—ã–π–¥–µ—Ç "–í—ã—Ö–æ–¥–Ω–æ–π")
            continue

        slot = next((s for s in info.get("slots", []) if s["pos"] == slot_idx), None)
        if not slot:
            continue

        start = slot["start"]
        end = slot["end"]
        name = (slot.get("name") or "").strip()
        if name:
            results.append(f'{start}‚Äì{end} "{escape(name)}"')
        else:
            results.append(f"{start}‚Äì{end}")

    return results

# === REPLACE my_next_command WITH THIS ===
async def my_next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å (–¥–æ 60 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥), –∫–æ–≥–¥–∞ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–º–µ–Ω–∞(—ã),
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ reply_with_absence_banner.
    """
    uid = update.effective_user.id
    today = date.today()

    # –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å–æ —Å–º–µ–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target = None
    for i in range(0, 60):
        d = today + timedelta(days=i)
        lines = _my_assignments_compact(uid, d)
        if lines:
            target = (d, lines)
            break

    if not target:
        text_html = "–ë–ª–∏–∂–∞–π—à–∏–µ 60 –¥–Ω–µ–π —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        user_id = update.effective_user.id
        await reply_with_absence_banner(update, text_html, user_id)
        return

    on_date, lines = target
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω—É–∂–Ω–æ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞)
    header = f"üóì <b>{_weekday_ru(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
    body = "\n".join(f"‚Ä¢ {l}" for l in lines)
    text_html = header + body

    user_id = update.effective_user.id
    await reply_with_absence_banner(update, text_html, user_id)


# === REPLACE next_command WITH THIS ===
async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –î–≤–∞ —Ä–µ–∂–∏–º–∞:
      - /next                -> –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Å–æ —Å–º–µ–Ω–∞–º–∏ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º (–≥—Ä—É–ø–ø–æ–≤–æ–π –æ–±–∑–æ—Ä)
      - /next <user_id|@u>   -> –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Å–æ —Å–º–µ–Ω–æ–π –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä –æ—Ç–ø—É—Å–∫/–±–æ–ª—å–Ω–∏—á–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ user_id, —á–µ–π next –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
    –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –±–∞–Ω–Ω–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ).
    """
    args = context.args or []
    req_uid = update.effective_user.id

    # --- —Ä–µ–∂–∏–º 1: —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω ---
    target_uid = None
    if args:
        a0 = args[0].strip()
        if a0.isdigit():
            target_uid = int(a0)
        elif a0.startswith("@"):
            # –Ω–∞–π–¥—ë–º –ø–æ username –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø
            for g in (time_repo.list_groups() or []):
                info = time_repo.get_group_info(g["key"])
                if not info:
                    continue
                m = next((m for m in info.get("members", [])
                          if (m.get("username") or "").strip().lower() == a0[1:].lower()), None)
                if m:
                    target_uid = int(m.get("user_id"))
                    break

    if target_uid is not None:
        # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π next (–∫–∞–∫ –≤ /my_next, –Ω–æ –ø–æ —á—É–∂–æ–º—É user_id)
        today = date.today()
        target = None
        for i in range(60):
            d = today + timedelta(days=i)
            lines = _my_assignments_compact(target_uid, d)
            if lines:
                target = (d, lines)
                break

        if not target:
            text_html = "–ë–ª–∏–∂–∞–π—à–∏–µ 60 –¥–Ω–µ–π —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await reply_with_absence_banner(update, text_html, target_uid)
            return

        on_date, lines = target
        header = f"üóì <b>{_weekday_ru(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
        body = "\n".join(f"‚Ä¢ {l}" for l in lines)
        text_html = header + body
        await reply_with_absence_banner(update, text_html, target_uid)
        return

    # --- —Ä–µ–∂–∏–º 2: –≥—Ä—É–ø–ø–æ–≤–æ–π –æ–±–∑–æ—Ä (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
    today = date.today()
    target = None
    for i in range(60):
        d = today + timedelta(days=i)
        lines = _assignments_for_date(d)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –ø–æ –í–°–ï–ú –≥—Ä—É–ø–ø–∞–º –Ω–∞ –¥–∞—Ç—É
        if lines:
            target = (d, lines)
            break

    if not target:
        text_html = "–ë–ª–∏–∂–∞–π—à–∏–µ 60 –¥–Ω–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        await reply_with_absence_banner(update, text_html, req_uid)
        return

    on_date, lines = target
    header = f"üóì <b>{_weekday_ru(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
    body = "\n".join(lines).strip()
    text_html = header + body

    # –ë–∞–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ), —Ç.–∫. –æ–±–∑–æ—Ä –≥—Ä—É–ø–ø–æ–≤–æ–π
    await reply_with_absence_banner(update, text_html, req_uid)

# === FIX TODAY/TOMORROW/ONDATE ===

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    on_date = date.today()

    lines = _assignments_for_date(on_date)  # —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç üè¢/üè† –≤–Ω—É—Ç—Ä–∏
    if not lines:
        text_html = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n–°–º–µ–Ω –Ω–µ—Ç."
    else:
        header = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
        text_html = header + "\n".join(lines).strip()

    await reply_with_absence_banner(update, text_html, uid)


async def tomorrow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    on_date = date.today() + timedelta(days=1)

    lines = _assignments_for_date(on_date)
    if not lines:
        text_html = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n–°–º–µ–Ω –Ω–µ—Ç."
    else:
        header = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
        text_html = header + "\n".join(lines).strip()

    await reply_with_absence_banner(update, text_html, uid)


async def ondate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É: /ondate DD.MM –∏–ª–∏ /ondate DD.MM.YYYY")
        return

    raw = " ".join(context.args)
    # –ø–µ—Ä–µ–¥–∞–¥–∏–º TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≥–æ–¥, –µ—Å–ª–∏ –æ–Ω –æ–ø—É—â–µ–Ω
    on_date = parse_date_arg(raw)
    if not on_date:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: /ondate 05.09.2025")
        return

    lines = _assignments_for_date(on_date)
    if not lines:
        text_html = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n–°–º–µ–Ω –Ω–µ—Ç."
    else:
        header = f"üóì <b>{_ru_weekday(on_date)}, {on_date.strftime('%Y-%m-%d')}</b>\n"
        text_html = header + "\n".join(lines).strip()

    await reply_with_absence_banner(update, text_html, uid)

def _badge_location(uid: int, on_date: date, group_key: str | None = None) -> str:
    rows = get_locations(on_date, group_key)
    for r in rows:
        if int(r["user_id"]) == int(uid):
            return " üè¢" if r["location"] == "office" else " üè†"
    return ""

