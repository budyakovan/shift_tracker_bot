from datetime import date, timedelta
import calendar
from config import START_DATE, INITIAL_SENIORS, INITIAL_JUNIORS, SCHEDULE, ROTATION_CONFIG


def calculate_days_since_start(target_date: date) -> int:
    start_date = date(*START_DATE)
    if target_date < start_date:
        return 0
    return (target_date - start_date).days


def get_rotated_groups_for_date(target_date: date) -> tuple:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–∞–≤—ã –≥—Ä—É–ø–ø –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º —Ä–æ—Ç–∞—Ü–∏–∏.
    """
    days_passed = calculate_days_since_start(target_date)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    senior_rot_days = ROTATION_CONFIG["senior_rotation_days"]
    junior_rot_days = ROTATION_CONFIG["junior_rotation_days"]
    pair_rot_days = ROTATION_CONFIG["pair_rotation_days"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–æ—Ç–∞—Ü–∏—è—Ö
    senior_rot_pos = (days_passed // senior_rot_days) % 2
    junior_rot_pos = (days_passed // junior_rot_days) % 2
    pair_rot_pos = (days_passed // pair_rot_days) % 2

    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—à–∏—Ö –∏ –º–ª–∞–¥—à–∏—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ—Ç–∞—Ü–∏–∏
    if senior_rot_pos == 0:
        seniors = INITIAL_SENIORS
    else:
        seniors = [INITIAL_SENIORS[1], INITIAL_SENIORS[0]]

    if junior_rot_pos == 0:
        juniors = INITIAL_JUNIORS
    else:
        juniors = [INITIAL_JUNIORS[1], INITIAL_JUNIORS[0]]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é —Å–≤—è–∑–æ–∫ (–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã)
    if pair_rot_pos == 0:
        group_1 = {"senior": seniors[0], "junior": juniors[0]}
        group_2 = {"senior": seniors[1], "junior": juniors[1]}
    else:
        group_1 = {"senior": seniors[1], "junior": juniors[1]}
        group_2 = {"senior": seniors[0], "junior": juniors[0]}

    return group_1, group_2


def get_schedule_period_for_date(target_date: date) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤.
    """
    days_passed = calculate_days_since_start(target_date)
    pair_rot_days = ROTATION_CONFIG["pair_rotation_days"]
    periods_config = ROTATION_CONFIG["periods_config"]

    day_of_cycle = days_passed % pair_rot_days

    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
    if day_of_cycle == periods_config["group1_works_days"][0]:
        return "first_day"
    elif day_of_cycle == periods_config["group2_works_days"][0]:
        return "second_day"
    elif day_of_cycle == periods_config["group1_works_days"][1]:
        return "first_night"
    elif day_of_cycle == periods_config["group2_works_days"][1]:
        return "second_night"
    else:
        return "day_off"

def generate_duty_message_for_date(target_date: date) -> str:
    group_1, group_2 = get_rotated_groups_for_date(target_date)
    period = get_schedule_period_for_date(target_date)

    weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    weekday_ru = weekdays_ru[target_date.weekday()]

    message = f"üìÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {target_date.strftime('%d.%m.%Y')} ({weekday_ru})\n"

    if period == "first_day":
        message += "üî∏ 1-–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 1 (–û—Ñ–∏—Å): {group_1['senior']} + {group_1['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_1_office']['day']}\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 2 (–î–æ–º): {group_2['senior']} + {group_2['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_2_home']['day']}\n"

    elif period == "second_day":
        message += "üî∏ 2-–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 1 (–û—Ñ–∏—Å): {group_1['senior']} + {group_1['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_1_office']['day']}\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 2 (–î–æ–º): {group_2['senior']} + {group_2['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_2_home']['day']}\n"

    elif period == "first_night":
        message += "üåô 1-—è —Ä–∞–±–æ—á–∞—è –Ω–æ—á—å\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 1 (–û—Ñ–∏—Å): {group_1['senior']} + {group_1['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_1_office']['night']}\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 2 (–í—ã—Ö–æ–¥–Ω–æ–π): {group_2['senior']} + {group_2['junior']}\n"

    elif period == "second_night":
        message += "üåô 2-—è —Ä–∞–±–æ—á–∞—è –Ω–æ—á—å\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 1 (–û—Ñ–∏—Å): {group_1['senior']} + {group_1['junior']}\n"
        message += f"   –í—Ä–µ–º—è: {SCHEDULE['group_1_office']['night']}\n"
        message += f"   –ì—Ä—É–ø–ø–∞ 2 (–í—ã—Ö–æ–¥–Ω–æ–π): {group_2['senior']} + {group_2['junior']}\n"

    else:  # day_off
        message += "‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å\n"

    return message


def generate_duty_message_for_period(days: int = 1) -> str:
    if days < 1 or days > 30:
        return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç 1 –¥–æ 30"

    today = date.today()
    messages = []
    for i in range(days):
        target_date = today + timedelta(days=i)
        messages.append(generate_duty_message_for_date(target_date))

    return "\n\n".join(messages)


def debug_rotation_for_period(days: int = 14):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥"""
    today = date.today()
    results = []

    results.append("üîß –û–¢–õ–ê–î–ö–ê –†–û–¢–ê–¶–ò–ò üîß")
    results.append(f"START_DATE: {START_DATE}")
    results.append(f"–°–µ–≥–æ–¥–Ω—è: {today.strftime('%d.%m.%Y')}")
    results.append("")

    for i in range(days):
        target_date = today + timedelta(days=i)
        days_passed = calculate_days_since_start(target_date)
        group_1, group_2 = get_rotated_groups_for_date(target_date)
        period = get_schedule_period_for_date(target_date)

        day_of_cycle = days_passed % ROTATION_CONFIG["pair_rotation_days"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è
        day_type = ""
        if period == "first_day":
            day_type = "1-–π –¥–µ–Ω—å"
        elif period == "second_day":
            day_type = "2-–π –¥–µ–Ω—å"
        elif period == "first_night":
            day_type = "1-—è –Ω–æ—á—å"
        elif period == "second_night":
            day_type = "2-—è –Ω–æ—á—å"
        else:
            day_type = "–í—ã—Ö–æ–¥–Ω–æ–π"

        results.append(
            f"{target_date.strftime('%d.%m.%Y')}: "
            f"–î–µ–Ω—å {days_passed} (—Ü–∏–∫–ª: {day_of_cycle}), "
            f"{day_type}, "
            f"–ì1: {group_1['senior'][0]}.{group_1['junior'][0]}, "
            f"–ì2: {group_2['senior'][0]}.{group_2['junior'][0]}"
        )

    return "\n".join(results)