# -*- coding: utf-8 -*-
from datetime import date, datetime, timedelta, time
from typing import Optional, List, Dict
import re

from database import group_repository


CYCLE_LEN = 8

# –†–∞–±–æ—á–∏–µ —Å—É—Ç–∫–∏ –≤ 8-–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: 0..3 (–î1, –î2, –ù1, –ù2)
ON_DAYS = {0, 1, 2, 3}


def weekday_ru(d: date) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[d.weekday()]

def _group_ref_start(g: Dict) -> date:
    """
    –î–ª—è –≥—Ä—É–ø–ø—ã –±–µ—Ä—ë–º:
      - g['epoch'], –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ (—Å–≤–æ—è —ç–ø–æ—Ö–∞), –∏–Ω–∞—á–µ
      - BASE_EPOCH + offset_days (—Å–¥–≤–∏–≥ –æ—Ç –±–∞–∑–æ–≤–æ–π –≥—Ä—É–ø–ø—ã).
    """
    if g.get("epoch"):
        # –≤ repo epoch —É–∂–µ —Ç–∏–ø date
        return g["epoch"]
    return BASE_EPOCH + timedelta(days=int(g.get("offset_days", 0) or 0))

def _local_cycle_day(g: Dict, d: date) -> int:
    offset_h = int(g.get("tz_offset_hours", 0) or 0)
    pivot = datetime.combine(d, time(12, 0))
    d_local = (pivot + timedelta(hours=offset_h)).date()

    ref = _group_ref_start(g)
    delta = (d_local - ref).days
    period = int(g.get("period") or CYCLE_LEN)  # –µ—Å–ª–∏ –≤ –ë–î period=8 ‚Äî –≤–æ–∑—å–º—ë–º –µ–≥–æ
    if period <= 0:
        period = CYCLE_LEN
    return delta % period

def _find_duty_groups(d: date) -> List[Dict]:
    groups = group_repository.list_groups()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∞—è —Ñ–∞–∑–∞
    return [g for g in groups if _local_cycle_day(g, d) in ON_DAYS]


def _list_staff(group_key: str) -> List[Dict]:
    return group_repository.list_users_in_group(group_key)

# -------- –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –ø–æ —Å—Ö–µ–º–µ –î–î/–ù–ù —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã --------

def resolve_slot_ddnn_alternating(epoch: date, period: int, base_pos: int, day: date) -> int:
    """
    4-–¥–Ω–µ–≤–Ω–∞—è —Å—Ö–µ–º–∞ (–î1, –î2, –ù1, –ù2) —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã.
    –°–ª–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è:
      0: –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å, 1: –ö–æ—Ä–æ—Ç–∫–∏–π –¥–µ–Ω—å, 2: –ü–æ–ª–Ω–∞—è –Ω–æ—á—å, 3: –ö–æ—Ä–æ—Ç–∫–∞—è –Ω–æ—á—å
    base_pos ‚àà {0,1}
    """
    if period <= 0:
        period = 4
    d = (day - epoch).days % period
    if d == 0:   # –î1
        return base_pos            # 0‚Üí0, 1‚Üí1
    if d == 1:   # –î2
        return 1 - base_pos        # 0‚Üí1, 1‚Üí0
    if d == 2:   # –ù1
        return base_pos + 2        # 0‚Üí2, 1‚Üí3
    return 3 - base_pos            # –ù2: 0‚Üí3, 1‚Üí2

def resolve_slot_ddnn_alt_8(epoch: date, period: int, base_pos: int, day: date):
    """
    8-–¥–Ω–µ–≤–Ω–∞—è —Å—Ö–µ–º–∞ (–î1, –î2, –ù1, –ù2, OFF, OFF, OFF, OFF).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞ (0..3) –∏–ª–∏ None –¥–ª—è OFF.
    """
    if period <= 0:
        period = 8
    d = (day - epoch).days % period
    if d == 0:   # –î1
        return base_pos            # 0‚Üí0, 1‚Üí1
    if d == 1:   # –î2
        return 1 - base_pos        # 0‚Üí1, 1‚Üí0
    if d == 2:   # –ù1
        return base_pos + 2        # 0‚Üí2, 1‚Üí3
    if d == 3:   # –ù2
        return 3 - base_pos        # 0‚Üí3, 1‚Üí2
    return None

def build_duty_message(d: date, requester_id: int) -> str:
    duty_groups = _find_duty_groups(d)
    wday = weekday_ru(d)
    header = f"üìÖ {d.strftime('%d.%m.%Y')} ({wday})"
    if not duty_groups:
        return f"{header}\nü§∑ –ù–∞ —ç—Ç—É –¥–∞—Ç—É –¥–µ–∂—É—Ä–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    my_group = group_repository.get_user_group(requester_id)
    my_key = my_group["key"] if my_group else None

    # –†–∞–∑–Ω–µ—Å—ë–º –ø–æ —Å–µ–∫—Ü–∏—è–º (–¥–Ω–µ–≤–Ω—ã–µ/–Ω–æ—á–Ω—ã–µ —Ñ–∞–∑—ã —ç—Ç–æ–≥–æ –¥–Ω—è)
    day_items, night_items = [], []
    for g in duty_groups:
        idx = _local_cycle_day(g, d)
        kind = _phase_kind(idx)
        if kind == "day":
            day_items.append((g, idx))
        elif kind == "night":
            night_items.append((g, idx))

    # –ú–æ—é –≥—Ä—É–ø–ø—É ‚Äî –ø–µ—Ä–≤–æ–π –≤ —Å–≤–æ–µ–π —Å–µ–∫—Ü–∏–∏
    def _sort(items):
        return sorted(items, key=lambda t: 0 if t[0].get("key") == my_key else 1)

    day_items = _sort(day_items)
    night_items = _sort(night_items)

    parts = [header]

    def _section(title, items):
        if not items:
            return
        parts.append(title)
        for g, idx in items:
            users = _list_staff(g["key"])
            is_mine = (g["key"] == my_key)
            tz_text = g["tz_name"] or (f"MSK{int(g.get('tz_offset_hours', 0)):+d}h")
            phase = _phase_label(idx)
            em = _phase_emoji(idx)

            if is_mine:
                parts.append("‚úÖ –ú—ã –¥–µ–∂—É—Ä–∏–º")
            else:
                parts.append(f"üë∑ \"{g.get('name') or g.get('key')}\" ({g['key']}, {tz_text})")

            parts.append(f"{em} {phase}")

            if users:
                for u in users:
                    full_name = f"{u.get('first_name') or ''} {u.get('last_name') or ''}".strip()
                    uname = f"@{u['username']}" if u.get('username') else ""
                    label = (full_name or uname or str(u['user_id'])).strip()
                    tail = f" {uname}" if (uname and uname not in label) else ""
                    parts.append(f"‚Ä¢ {label}{tail}")
            else:
                parts.append("‚Ä¢ (–Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")

            parts.append("‚îÄ" * 20)

    _section("–î–Ω–µ–≤–Ω—ã–µ —Å–º–µ–Ω—ã:", day_items)
    _section("–ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã:", night_items)

    return "\n".join(parts)

# -------- –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –¥–ª—è /ondate --------

_DATE_RE = re.compile(r"^\s*(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?\s*$")

def parse_date_arg(raw: str, *, user_tz=None) -> date | None:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - DD.MM.YYYY   (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.09.2025)
      - D.M.YYYY
      - DD.MM        (–≥–æ–¥ –±–µ—Ä—ë—Ç—Å—è —Ç–µ–∫—É—â–∏–π –≤ TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
      - YYYY-MM-DD   (ISO)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç date –∏–ª–∏ None.
    """
    raw = (raw or "").strip()

    # ISO: YYYY-MM-DD
    m = re.fullmatch(r"(\d{4})-(\d{2})-(\d{2})", raw)
    if m:
        try:
            return date(int(m.group(1)), int(m.group(2)), int(m.group(3)))
        except ValueError:
            return None

    # DD.MM.YYYY / D.M.YYYY
    m = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{4})", raw)
    if m:
        d, mth, y = map(int, m.groups())
        try:
            return date(y, mth, d)
        except ValueError:
            return None

    # DD.MM / D.M  (–±–µ–∑ –≥–æ–¥–∞ ‚Üí –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –≤ TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    m = re.fullmatch(r"(\d{1,2})\.(\d{1,2})", raw)
    if m:
        d, mth = map(int, m.groups())
        if user_tz is None:
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –º–æ–∂–µ—à—å –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
            try:
                user_tz = _get_user_tz  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∏–∂–µ fallback
            except Exception:
                user_tz = None
        try:
            if callable(user_tz):
                y = datetime.now(user_tz(update=None) if user_tz.__code__.co_argcount else user_tz).year  # –Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
            else:
                y = datetime.now().year
        except Exception:
            y = datetime.now().year
        try:
            return date(y, mth, d)
        except ValueError:
            return None

    return None

def _phase_label(day_idx: int) -> str:
    """
    0..3 ‚Äî —Ä–∞–±–æ—á–∏–µ: 0=1 –¥–µ–Ω—å, 1=2 –¥–µ–Ω—å, 2=1 –Ω–æ—á—å, 3=2 –Ω–æ—á—å
    —Å –ø–µ—Ä–∏–æ–¥–æ–º 4 ¬´–≤—ã—Ö–æ–¥–Ω–æ–π¬ª –Ω–µ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    mapping = {0: "1 –¥–µ–Ω—å", 1: "2 –¥–µ–Ω—å", 2: "1 –Ω–æ—á—å", 3: "2 –Ω–æ—á—å"}
    return mapping.get(day_idx, "–≤—ã—Ö–æ–¥–Ω–æ–π")

def _phase_emoji(day_idx: int) -> str:
    # 0,1 = –¥–µ–Ω—å ‚Üí ‚òÄÔ∏è ; 2,3 = –Ω–æ—á—å ‚Üí üåô ; –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ
    return "‚òÄÔ∏è" if day_idx in (0, 1) else ("üåô" if day_idx in (2, 3) else "")

def _phase_kind(day_idx: int) -> str:
    # 0,1 = –¥–µ–Ω—å; 2,3 = –Ω–æ—á—å; –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π (–¥–ª—è period=4 –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    return "day" if day_idx in (0, 1) else ("night" if day_idx in (2, 3) else "off")
