# database/connection.py
import psycopg2
import logging
from config import config

logger = logging.getLogger(__name__)

class DatabaseConnection:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self):
        # –ª–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.connection = None

    def connect(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –∏/–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î.
        –î–û–õ–ñ–ù–û –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç psycopg2 connection (–ù–ï None).
        """
        # –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –∂–∏–≤–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å
        if self.connection and getattr(self.connection, "closed", 1) == 0:
            return self.connection

        # –∏–Ω–∞—á–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ
        try:
            self.connection = psycopg2.connect(
                host=config.DB_HOST,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                port=config.DB_PORT,
            )
            self.connection.autocommit = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return self.connection  # <-- –í–ê–ñ–ù–û: —è–≤–Ω–æ –≤–µ—Ä–Ω—É—Ç—å conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self.connection = None
            raise

    def get_connection(self):
        """–°–∏–Ω–æ–Ω–∏–º –¥–ª—è connect(), –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."""
        return self.connect()

    def reconnect(self):
        try:
            if self.connection and getattr(self.connection, "closed", 1) == 0:
                self.connection.close()
            self.connection = None
            return self.connect()
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
            raise

    def close(self):
        if self.connection and getattr(self.connection, "closed", 1) == 0:
            self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

db_connection = DatabaseConnection()

# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
def safe_rollback(conn):
    """–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Ç–∫–ª—é—á–∞—Ç autocommit –∏ —Å–ª–æ–≤—è—Ç –æ—à–∏–±–∫—É."""
    try:
        if conn and not conn.autocommit:
            conn.rollback()
    except Exception:
        pass

def is_tx_aborted_error(exc: Exception) -> bool:
    return "current transaction is aborted" in str(exc).lower()
